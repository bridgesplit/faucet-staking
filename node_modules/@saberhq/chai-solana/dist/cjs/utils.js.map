{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;;AAAA,4BAA0B;AAO1B,4DAA6D;AAE7D,+BAAsC;AAEtC,iEAAmE;AAEnE,MAAM,SAAS,GAAG,CAChB,EAAmD,EACtB,EAAE;IAC/B,IAAI,EAAE,YAAY,mCAAkB,EAAE;QACpC,OAAO,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;KACxB;SAAM,IAAI,EAAE,EAAE;QACb,IAAI;YACF,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YACpD,OAAO,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;SAC7B;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,IAAI,GAAG,YAAY,KAAK,IAAI,MAAM,IAAI,GAAG,EAAE;gBAChD,IAAA,gDAAyB,EAAC,GAA2B,CAAC,CAAC;aACxD;YACD,MAAM,GAAG,CAAC;SACX;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;KAC/B;AACH,CAAC,CAAA,CAAC;AAEK,MAAM,QAAQ,GAAG,CACtB,EAK+B,EAC/B,GAAY,EACZ,EAAmD,EAC3B,EAAE;IAC1B,MAAM,aAAa,GAAG,CAAO,OAA2B,EAAE,EAAE;QAC1D,MAAM,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAG,OAAO,CAAC,CAAA,CAAC;QACpB,OAAO,OAAO,CAAC;IACjB,CAAC,CAAA,CAAC;IAEF,IAAI,EAAE,IAAI,MAAM,IAAI,EAAE,EAAE;QACtB,OAAO,IAAA,aAAM,EAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC;KACvE;IACD,IAAI,EAAE,YAAY,mCAAkB,EAAE;QACpC,OAAO,IAAA,aAAM,EAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC;KAC9D;SAAM;QACL,OAAO,IAAA,aAAM,EAAC,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC;KAClE;AACH,CAAC,CAAC;AAvBW,QAAA,QAAQ,YAuBnB;AAIK,MAAM,WAAW,GAAG,CAAC,KAAe,EAAE,KAAe,EAAQ,EAAE;IACpE,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C,CAAC,CAAC;AAHW,QAAA,WAAW,eAGtB","sourcesContent":["import \"chai-as-promised\";\n\nimport type { Idl } from \"@project-serum/anchor\";\nimport type {\n  TransactionEnvelope,\n  TransactionReceipt,\n} from \"@saberhq/solana-contrib\";\nimport { PendingTransaction } from \"@saberhq/solana-contrib\";\nimport type { SendTransactionError } from \"@solana/web3.js\";\nimport { assert, expect } from \"chai\";\n\nimport { printSendTransactionError } from \"./printInstructionLogs\";\n\nconst processTX = async (\n  tx: TransactionEnvelope | PendingTransaction | null\n): Promise<TransactionReceipt> => {\n  if (tx instanceof PendingTransaction) {\n    return await tx.wait();\n  } else if (tx) {\n    try {\n      const pending = await tx.send({ printLogs: false });\n      return await pending.wait();\n    } catch (err) {\n      if (err && err instanceof Error && \"logs\" in err) {\n        printSendTransactionError(err as SendTransactionError);\n      }\n      throw err;\n    }\n  } else {\n    throw new Error(\"tx is null\");\n  }\n};\n\nexport const expectTX = (\n  tx:\n    | TransactionEnvelope\n    | null\n    | Promise<TransactionEnvelope | null>\n    | PendingTransaction\n    | Promise<PendingTransaction>,\n  msg?: string,\n  cb?: (receipt: TransactionReceipt) => Promise<void>\n): Chai.PromisedAssertion => {\n  const handleReceipt = async (receipt: TransactionReceipt) => {\n    await cb?.(receipt);\n    return receipt;\n  };\n\n  if (tx && \"then\" in tx) {\n    return expect(tx.then(processTX).then(handleReceipt), msg).eventually;\n  }\n  if (tx instanceof PendingTransaction) {\n    return expect(tx.wait().then(handleReceipt), msg).eventually;\n  } else {\n    return expect(processTX(tx).then(handleReceipt), msg).eventually;\n  }\n};\n\nexport type IDLError = NonNullable<Idl[\"errors\"]>[number];\n\nexport const assertError = (error: IDLError, other: IDLError): void => {\n  assert.strictEqual(error.code, other.code);\n  assert.strictEqual(error.msg, other.msg);\n};\n"]}