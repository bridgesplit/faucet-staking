{"version":3,"file":"printInstructionLogs.js","sourceRoot":"","sources":["../../src/printInstructionLogs.ts"],"names":[],"mappings":";;;;AACA,4DAA+E;AAE/E,+DAAiC;AAEjC;;;GAGG;AACI,MAAM,+BAA+B,GAAG,CAC7C,IAAgC,EACxB,EAAE,CACV,IAAI;KACD,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;IACd,OAAO;QACL;YACE,cAAM,CAAC,IAAI,CAAC,cAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,cAAM,CAAC,IAAI,CAAC,cAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAChD,GAAG,CAAC,cAAc;gBAChB,CAAC,CAAC,cAAM,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,cAAc,EAAE,CAAC;gBAChD,CAAC,CAAC,QAAQ;SACb,CAAC,IAAI,CAAC,EAAE,CAAC;QACV,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACxB,MAAM,QAAQ,GAAG,IAAA,+BAAc,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC7C,QAAQ,KAAK,CAAC,IAAI,EAAE;gBAClB,KAAK,MAAM;oBACT,OAAO,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAChC,KAAK,KAAK;oBACR,OAAO,cAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC/B,KAAK,cAAc;oBACjB,OAAO,cAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC9B,KAAK,cAAc;oBACjB,OAAO,cAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC9B,KAAK,QAAQ;oBACX,OAAO,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAChC,KAAK,SAAS;oBACZ,OAAO,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACjC;QACH,CAAC,CAAC;KACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,CAAC,CAAC;KACD,IAAI,CAAC,IAAI,CAAC,CAAC;AAhCH,QAAA,+BAA+B,mCAgC5B;AAET,MAAM,yBAAyB,GAAG,CAAC,GAAyB,EAAE,EAAE;;IACrE,IAAI;QACF,MAAM,MAAM,GAAG,IAAA,qCAAoB,EAAC,MAAA,GAAG,CAAC,IAAI,mCAAI,IAAI,EAAE,GAAG,CAAC,CAAC;QAC3D,OAAO,CAAC,KAAK,CAAC,IAAA,uCAA+B,EAAC,MAAM,CAAC,CAAC,CAAC;KACxD;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,CAAC,CAAC,CAAC;QACtD,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;KAC5C;AACH,CAAC,CAAC;AARW,QAAA,yBAAyB,6BAQpC","sourcesContent":["import type { InstructionLogs } from \"@saberhq/solana-contrib\";\nimport { formatLogEntry, parseTransactionLogs } from \"@saberhq/solana-contrib\";\nimport type { SendTransactionError } from \"@solana/web3.js\";\nimport colors from \"colors/safe\";\n\n/**\n * Formats instruction logs to be printed to the console.\n * @param logs\n */\nexport const formatInstructionLogsForConsole = (\n  logs: readonly InstructionLogs[]\n): string =>\n  logs\n    .map((log, i) => {\n      return [\n        [\n          colors.bold(colors.blue(\"=> \")),\n          colors.bold(colors.white(`Instruction #${i}: `)),\n          log.programAddress\n            ? colors.yellow(`Program ${log.programAddress}`)\n            : \"System\",\n        ].join(\"\"),\n        ...log.logs.map((entry) => {\n          const entryStr = formatLogEntry(entry, true);\n          switch (entry.type) {\n            case \"text\":\n              return colors.white(entryStr);\n            case \"cpi\":\n              return colors.cyan(entryStr);\n            case \"programError\":\n              return colors.red(entryStr);\n            case \"runtimeError\":\n              return colors.red(entryStr);\n            case \"system\":\n              return colors.white(entryStr);\n            case \"success\":\n              return colors.green(entryStr);\n          }\n        }),\n      ].join(\"\\n\");\n    })\n    .join(\"\\n\");\n\nexport const printSendTransactionError = (err: SendTransactionError) => {\n  try {\n    const parsed = parseTransactionLogs(err.logs ?? null, err);\n    console.error(formatInstructionLogsForConsole(parsed));\n  } catch (e) {\n    console.error(`Could not parse transaction error`, e);\n    console.error(\"SendTransactionError\", err);\n  }\n};\n"]}