"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertError = exports.expectTX = void 0;
const tslib_1 = require("tslib");
require("chai-as-promised");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const chai_1 = require("chai");
const printInstructionLogs_1 = require("./printInstructionLogs");
const processTX = (tx) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (tx instanceof solana_contrib_1.PendingTransaction) {
        return yield tx.wait();
    }
    else if (tx) {
        try {
            const pending = yield tx.send({ printLogs: false });
            return yield pending.wait();
        }
        catch (err) {
            if (err && err instanceof Error && "logs" in err) {
                (0, printInstructionLogs_1.printSendTransactionError)(err);
            }
            throw err;
        }
    }
    else {
        throw new Error("tx is null");
    }
});
const expectTX = (tx, msg, cb) => {
    const handleReceipt = (receipt) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield (cb === null || cb === void 0 ? void 0 : cb(receipt));
        return receipt;
    });
    if (tx && "then" in tx) {
        return (0, chai_1.expect)(tx.then(processTX).then(handleReceipt), msg).eventually;
    }
    if (tx instanceof solana_contrib_1.PendingTransaction) {
        return (0, chai_1.expect)(tx.wait().then(handleReceipt), msg).eventually;
    }
    else {
        return (0, chai_1.expect)(processTX(tx).then(handleReceipt), msg).eventually;
    }
};
exports.expectTX = expectTX;
const assertError = (error, other) => {
    chai_1.assert.strictEqual(error.code, other.code);
    chai_1.assert.strictEqual(error.msg, other.msg);
};
exports.assertError = assertError;
//# sourceMappingURL=utils.js.map