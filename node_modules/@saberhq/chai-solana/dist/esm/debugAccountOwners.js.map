{"version":3,"file":"debugAccountOwners.js","sourceRoot":"","sources":["../../src/debugAccountOwners.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,IAAI,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACnE,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAE7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,MAAM,UAAU,kBAAkB,CAAC,QAAgB;IACjD,OAAO,kBAAkB,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC","sourcesContent":["import { Provider as AnchorProvider } from \"@project-serum/anchor\";\nimport { printAccountOwners } from \"@saberhq/solana-contrib\";\n\n/**\n * A wrapper around `printAccountOwners` that loads the connection from env().\n * This is useful for people who are too lazy to pass in a connection.\n *\n * --------\n *\n * A useful tool for debugging account structs. It gives a quick glance at\n * addresses and owners. It also converts bignums into JS numbers.\n *\n * Types converted:\n * - **big numbers**: converted to native numbers\n * - **addresses**: format in base58, and prints the owner in parentheses if the account exists\n * - **plain objects**: recursively converts\n *\n * HINT: This function is mainly useful for the browser. If you are writing\n * Rust integration tests, use debugAccountOwners from chai-solana instead, so\n * that you don't have to pass in connection.\n *\n * Usage:\n * ```\n * await debugAccountOwners(depositAccounts); // using await is recommended, due to race conditions\n * void debugAccountOwners(depositAccounts); // don't do this in tests, there may be race conditions\n * ```\n *\n * Example output:\n * ```\n * tests/awesomeTest.spec.ts:583:29 {\n *   payer: 'CEGhKVeyXUrihUnNU9EchSuu6pMHEsB8MiKgvhJqYgd1 (11111111111111111111111111111111)',\n *   foo: '61tMNVhG66QZQ4UEAoHytqaUN4G1xpk1zsS5YU7Y2Qui (135QzSyjKTKaZ7ebhLpvNA2KUahEjykMjbqz3JV1V4k9)',\n *   bar: '9oPMxXVSm5msAecxi4zJpKDwbHS9c6Yos1ru739rVExc (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)',\n *   tokenProgram: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA (BPFLoader2111111111111111111111111111111111)'\n * }\n * ```\n *\n * WARNING: This may break silently if web3 changes its api. This is only\n * intended for debugging purposes only.\n */\nexport function debugAccountOwners(plainObj: object): Promise<void> {\n  return printAccountOwners(AnchorProvider.env().connection, plainObj);\n}\n"]}