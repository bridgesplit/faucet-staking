import { __awaiter } from "tslib";
import "chai-as-promised";
import { PendingTransaction } from "@saberhq/solana-contrib";
import { assert, expect } from "chai";
import { printSendTransactionError } from "./printInstructionLogs";
const processTX = (tx) => __awaiter(void 0, void 0, void 0, function* () {
    if (tx instanceof PendingTransaction) {
        return yield tx.wait();
    }
    else if (tx) {
        try {
            const pending = yield tx.send({ printLogs: false });
            return yield pending.wait();
        }
        catch (err) {
            if (err && err instanceof Error && "logs" in err) {
                printSendTransactionError(err);
            }
            throw err;
        }
    }
    else {
        throw new Error("tx is null");
    }
});
export const expectTX = (tx, msg, cb) => {
    const handleReceipt = (receipt) => __awaiter(void 0, void 0, void 0, function* () {
        yield (cb === null || cb === void 0 ? void 0 : cb(receipt));
        return receipt;
    });
    if (tx && "then" in tx) {
        return expect(tx.then(processTX).then(handleReceipt), msg).eventually;
    }
    if (tx instanceof PendingTransaction) {
        return expect(tx.wait().then(handleReceipt), msg).eventually;
    }
    else {
        return expect(processTX(tx).then(handleReceipt), msg).eventually;
    }
};
export const assertError = (error, other) => {
    assert.strictEqual(error.code, other.code);
    assert.strictEqual(error.msg, other.msg);
};
//# sourceMappingURL=utils.js.map