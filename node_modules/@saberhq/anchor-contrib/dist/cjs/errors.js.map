{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":";;;AASA;;;;GAIG;AACI,MAAM,gBAAgB,GAAG,CAAgB,GAAM,EAAe,EAAE;;IACrE,OAAO,CAAC,MAAA,MAAA,GAAG,CAAC,MAAM,0CAAE,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACtC,uCACK,GAAG,KACN,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,IACf;IACJ,CAAC,EAAE,EAAE,CAAC,mCAAI,EAAE,CAAgB,CAAC;AAC/B,CAAC,CAAC;AAPW,QAAA,gBAAgB,oBAO3B;AAEF;;;;GAIG;AACI,MAAM,UAAU,GAAG,CAAC,GAAiB,EAAU,EAAE,CACtD,IAAI,MAAM,CAAC,2BAA2B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AADpD,QAAA,UAAU,cAC0C","sourcesContent":["import type { Idl } from \"@project-serum/anchor\";\nimport type { IdlErrorCode } from \"@project-serum/anchor/dist/esm/idl\";\n\nimport type { AnchorError } from \".\";\n\nexport type ErrorMap<T extends Idl> = {\n  [K in AnchorError<T>[\"name\"]]: AnchorError<T> & { name: K };\n};\n\n/**\n * Generates the error mapping\n * @param idl\n * @returns\n */\nexport const generateErrorMap = <T extends Idl>(idl: T): ErrorMap<T> => {\n  return (idl.errors?.reduce((acc, err) => {\n    return {\n      ...acc,\n      [err.name]: err,\n    };\n  }, {}) ?? {}) as ErrorMap<T>;\n};\n\n/**\n * Returns a RegExp which matches the message of a program error.\n * @param err\n * @returns\n */\nexport const matchError = (err: IdlErrorCode): RegExp =>\n  new RegExp(`custom program error: 0x${err.code.toString(16)}`);\n"]}