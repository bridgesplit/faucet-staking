import { __awaiter } from "tslib";
import { SolanaAugmentedProvider } from "@saberhq/solana-contrib";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { Keypair } from "@solana/web3.js";
import { getATAAddresses, SPLToken } from ".";
import { getATAAddress } from "./ata";
import { createMintInstructions, DEFAULT_TOKEN_DECIMALS } from "./common";
import { getOrCreateATA, getOrCreateATAs } from "./instructions/ata";
import { deserializeAccount, deserializeMint } from "./layout";
import { Token } from "./token";
/**
 * Augmented provider with token utilities.
 */
export class TokenAugmentedProvider extends SolanaAugmentedProvider {
    constructor(provider) {
        super(provider);
    }
    /**
     * Creates a transaction to create a {@link Token}.
     */
    createTokenTX({ mintKP = Keypair.generate(), authority = this.walletKey, decimals = DEFAULT_TOKEN_DECIMALS, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const instructions = yield createMintInstructions(this.provider, authority, mintKP.publicKey, decimals);
            return {
                token: Token.fromMint(mintKP.publicKey, decimals),
                tx: this.newTX(instructions, [mintKP]),
            };
        });
    }
    /**
     * Transfers tokens from the provider's ATA to a `TokenAccount`.
     */
    transferTo({ amount, source, destination, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const txEnv = this.newTX();
            if (!source) {
                const sourceATA = yield this.getOrCreateATA({
                    mint: amount.token.mintAccount,
                });
                txEnv.append(sourceATA.instruction);
                source = sourceATA.address;
            }
            txEnv.append(SPLToken.createTransferInstruction(TOKEN_PROGRAM_ID, source, destination, this.walletKey, [], amount.toU64()));
            return txEnv;
        });
    }
    /**
     * Transfers tokens to a recipient's ATA.
     */
    transfer({ amount, source, to, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const toATA = yield this.getOrCreateATA({
                mint: amount.token.mintAccount,
                owner: to,
            });
            const txEnv = yield this.transferTo({
                amount,
                source,
                destination: toATA.address,
            });
            txEnv.prepend(toATA.instruction);
            return txEnv;
        });
    }
    /**
     * Creates a {@link Token}.
     */
    createToken({ mintKP = Keypair.generate(), authority = this.walletKey, decimals = DEFAULT_TOKEN_DECIMALS, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { token, tx } = yield this.createTokenTX({
                mintKP,
                authority,
                decimals,
            });
            yield tx.confirm();
            return token;
        });
    }
    /**
     * Gets an ATA address.
     * @returns
     */
    getATAAddress({ mint, owner = this.walletKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield getATAAddress({ mint, owner });
        });
    }
    /**
     * Gets an ATA address.
     * @returns
     */
    getATAAddresses({ mints, owner = this.walletKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield getATAAddresses({ mints, owner });
        });
    }
    /**
     * Gets an ATA, creating it if it doesn't exist.
     * @returns
     */
    getOrCreateATA({ mint, owner = this.walletKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield getOrCreateATA({ provider: this.provider, mint, owner });
        });
    }
    /**
     * Get or create multiple ATAs.
     * @returns
     */
    getOrCreateATAs({ mints, owner = this.walletKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield getOrCreateATAs({ provider: this.provider, mints, owner });
        });
    }
    /**
     * Loads a token from the blockchain, only if the decimals are not provided.
     * @param mint
     * @returns
     */
    loadToken(mint, info = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return Token.load(this.provider.connection, mint, info);
        });
    }
    /**
     * Mints tokens to a token account.
     * @param mint
     * @returns
     */
    mintToAccount({ amount, destination, }) {
        return this.newTX([
            SPLToken.createMintToInstruction(TOKEN_PROGRAM_ID, amount.token.mintAccount, destination, this.walletKey, [], amount.toU64()),
        ]);
    }
    /**
     * Mints tokens to the ATA of the `to` account.
     * @param amount The amount of tokens to mint.
     * @param to The owner of the ATA that may be created.
     * @returns
     */
    mintTo({ amount, to = this.walletKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const toATA = yield this.getOrCreateATA({
                mint: amount.token.mintAccount,
                owner: to,
            });
            const txEnv = this.mintToAccount({
                amount,
                destination: toATA.address,
            });
            txEnv.prepend(toATA.instruction);
            return txEnv;
        });
    }
    /**
     * Fetches a mint.
     * @param address
     * @returns
     */
    fetchMint(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield this.getAccountInfo(address);
            if (accountInfo === null) {
                return null;
            }
            return deserializeMint(accountInfo.accountInfo.data);
        });
    }
    /**
     * Fetches a token account.
     * @param address
     * @returns
     */
    fetchTokenAccount(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenAccountInfo = yield this.getAccountInfo(address);
            if (tokenAccountInfo === null) {
                return null;
            }
            return deserializeAccount(tokenAccountInfo.accountInfo.data);
        });
    }
    /**
     * Fetches an ATA.
     * @param mint
     * @param owner
     * @returns
     */
    fetchATA(mint, owner = this.walletKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const taAddress = yield getATAAddress({ mint, owner });
            return yield this.fetchTokenAccount(taAddress);
        });
    }
}
//# sourceMappingURL=tokenProvider.js.map